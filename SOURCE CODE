import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("16_air_quality_prediction.csv")



# 2. Data Cleaning & EDA
print(df.isnull().sum())  # Check for nulls
df['date'] = pd.to_datetime(df['date'])  # Convert date column
print(df.describe())  # Summary stats

# Convert 'location' column to numeric before calculating correlation
df['location'] = pd.factorize(df['location'])[0]

# Calculate correlation matrix only for numeric columns
numeric_df = df.select_dtypes(include=['number'])
sns.heatmap(numeric_df.corr(), annot=True);
plt.title("Correlation Matrix");
plt.show()


# 3. Feature Engineering
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['location'] = df['location'].astype('category').cat.codes


# 4. Model Building
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

X = df.drop(['date', 'predicted_aqi'], axis=1)
y = df['predicted_aqi']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, y_train)


# 5. Model Evaluation
from sklearn.metrics import mean_squared_error, r2_score

y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))


# 6. Visualization and Interpretation
plt.scatter(y_test, y_pred)
plt.xlabel("Actual AQI")
plt.ylabel("Predicted AQI")
plt.title("Actual vs Predicted AQI")
plt.show()

# Feature importance
feat_importance = pd.Series(model.feature_importances_, index=X.columns)
feat_importance.sort_values().plot(kind='barh')
plt.title("Feature Importance")
plt.show()
